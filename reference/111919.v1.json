{
  "openapi": "3.0.0",
  "tags": [],
  "info": {
    "title": "Sila API",
    "version": "1.0",
    "description": "# Welcome to the Sila API!\n\nSila allows you to build financial applications quickly and easily. Our API endpoints enable:\n\n* **ID verification** compliant with **U.S. Know Your Customer (KYC)** regulations, \n* **Secure account linking** through our partner **Plaid**, \n* **ACH transfers** in the US, and \n* **Smart contract** programming on Ethereum with our ERC-20 stablecoin. \n\nWe will soon be adding support for **card payments**, **business ID verification**, and **international payments**.\n\nBy using us to build financial applications, you can:\n\n- Decrease your go-to-market time (no regulatory headache or flaky bank partnerships),\n- Dramatically decrease your upfront costs,\n- Keep sensitive data off of your servers,\n- Let us handle ACH transactions (send us JSON, not flat files), and\n- Have the option to transfer tokens pegged to the value of $0.01 USD directly on the blockchain.",
    "contact": {
      "name": "Sila",
      "url": "www.silamoney.com",
      "email": "info@silamoney.com"
    }
  },
  "servers": [
    {
      "url": "sandbox.silamoney.com/{version}",
      "description": "Sila Sandbox Environment"
    },
    {
      "url": "api.silamoney.com/{version}",
      "description": "Sila Production Environment"
    }
  ],
  "paths": {
    "/check_handle": {
      "post": {
        "summary": "Check Handle",
        "tags": [],
        "responses": {
          "200": {
            "description": "`Handle sent in header.user_handle is available.`\nOR\n`Handle sent in header.user_handle is taken.`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The status attribute is a JSON key sent in the response body.",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the header_message"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response of result:\n`user.silamoney.eth is available`"
                    },
                    "status": {
                      "type": "string",
                      "description": "Two possible attributes for a 200 response:\n`SUCCESS` = Handle sent in `header.user_handle is available`\n`FAILURE` = Handle sent in `header.user_handle is taken`",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/check_handle response": {
                    "value": {
                      "reference": "ref",
                      "message": "user.silamoney.eth is available.",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Handle sent in header.user_handle is a reserved handle according to our JSON schema. (Or: request body otherwise does not conform to JSON schema.)"
          },
          "401": {
            "description": "Auth signature is absent or derived address does not belong to auth_handle."
          }
        },
        "description": "*Checks if a specific handle is already taken.*\n\nA \"handle\" works like a username in the Sila ecosystem. This endpoint ensures that a potential handle is available for use. If an entity has already been created with that handle, this endpoint will respond with a message that says that the handle is already in use and a `\"status\": \"FAILURE\"` in the JSON response body.",
        "operationId": "CheckHandle",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "required": true,
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests. "
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/header_msg.v1.json"
              },
              "examples": {
                "/check_handle request": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "header_msg"
                  }
                }
              }
            }
          },
          "description": "In the `header.user_handle` field, put the handle for which you want to check availability. The entry for `header.auth_handle` should have your developer handle.\n\nThe request body format for this endpoint is the [header_msg](#header_msg) JSON object.\n\nAn `authsignature` header is required for this request. "
        }
      },
      "parameters": []
    },
    "/register": {
      "post": {
        "summary": "Register",
        "tags": [],
        "responses": {
          "200": {
            "description": "Handle successfully added to system with KYC data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the entity_msg"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response of result:\n`user.silamoney.eth was successfully registered`"
                    },
                    "status": {
                      "type": "string",
                      "description": "Handle successfully added to system with KYC data.",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/register response": {
                    "value": {
                      "reference": "SOME ID",
                      "message": "user.silamoney.eth was successfully registered ",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body format, handle already in use, or blockchain address already in use."
          },
          "401": {
            "description": "`authsignature` header was absent or incorrect."
          }
        },
        "description": "*Attaches KYC data and specified blockchain address to an assigned handle.*\n\nThis is the endpoint you will use to create a new user and attach information that will be used to verify their identity. This does not start verification of the KYC data; it only adds the data to be verified. See [/request_kyc](#request_kyc) and [/check_kyc](#check_kyc) for verifying KYC status.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests. ",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/entity_msg.v1.json"
              },
              "examples": {
                "/register request": {
                  "value": {
                    "header": {
                      "reference": "SOME ID",
                      "created": 1234567890,
                      "user_handle": "user.silamoney.eth",
                      "auth_handle": "handle.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH"
                    },
                    "message": "entity_msg",
                    "address": {
                      "address_alias": "home",
                      "street_address_1": "123 Main Street",
                      "city": "New City",
                      "state": "OR",
                      "country": "US",
                      "postal_code": "97204-1234"
                    },
                    "identity": {
                      "identity_alias": "SSN",
                      "identity_value": "123452222"
                    },
                    "contact": {
                      "phone": "503-123-4567",
                      "contact_alias": "",
                      "email": "example@silamoney.com"
                    },
                    "crypto_entry": {
                      "crypto_alias": "Address 1",
                      "crypto_address": "0x1234567890abcdef1234567890abcdef12345678",
                      "crypto_code": "ETH"
                    },
                    "entity": {
                      "birthdate": "1900-01-31",
                      "entity_name": "Example User",
                      "first_name": "Example",
                      "last_name": "User",
                      "relationship": "user"
                    }
                  }
                }
              }
            }
          },
          "description": "At this endpoint, you will need to complete all fields with user information and include a valid Ethereum address (must not be already used in Sila system and not a smart contract). The private key associated with the `crypto_entry.crypto_address` should be used to generate usersignature headers on some subsequent calls.\n\nIn this version of the API, required KYC data includes:\n\n- Full legal name\n- U.S. Social Security Number (SSN)\n- Date of birth\n- A valid street address\n- An email address\n- A phone number\n\nExpect these requirements to change in upcoming versions!\n\nThis endpoint's request body is the [entity_msg](#entity_msg) JSON object.\n\nAn `authsignature` header is required for this request."
        },
        "operationId": "Register"
      }
    },
    "/request_kyc": {
      "post": {
        "summary": "Request KYC",
        "tags": [],
        "responses": {
          "200": {
            "description": "The verification process for the user registered under header.user_handle has been successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the entity_msg"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response of result:\n`user.silamoney.eth submitted for KYC review`"
                    },
                    "status": {
                      "type": "string",
                      "description": "`SUCCESS` or `FAILURE`",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body format."
          },
          "401": {
            "description": "authsignature` or `usersignature` header was absent or incorrect."
          }
        },
        "operationId": "post-request_kyc",
        "description": "After having created a user at a handle with /register, you can start the KYC verification process on the user with this endpoint. The verification results for a handle are asynchronously returned at the /check_kyc endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "required": true,
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "required": true,
            "description": "The usersignature header should be generated with the keypair associated with the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/header_msg.v1.json"
              },
              "examples": {
                "/request_kyc request": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "header_msg"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the header_msg JSON object.\n\nheader.user_handle should have the registered handle to be verified.\n\nAn `authsignature` header is required for this request. "
        }
      }
    },
    "/check_kyc": {
      "post": {
        "summary": "Check KYC",
        "tags": [],
        "responses": {
          "200": {
            "description": "The user handle has successfully passed KYC verification _OR_  \nThe user handle has not successfully passed KYC verification (may be pending, not have been registered, or have failed; `message` attribute will contain \"pending\" or \"failed\" substring).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The status attribute is a JSON key sent in the response body.",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the header_message"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response with result: `KYC passed for user.silamoney.eth`"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ],
                      "description": "The user handle has not successfully passed KYC verification (may be pending, not have been registered, or have failed; `message` attribute will contain \"pending\" or \"failed\" substring)."
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/check_kyc response": {
                    "value": {
                      "reference": "ref",
                      "message": "KYC passed for user.silamoney.eth",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-check_kyc",
        "description": "Returns whether entity attached to user handle is verified, not valid, or still pending.\n\nThis endpoint should be run after successfully completing /register and /request_kyc calls.\n\nSince ID verification is a relatively lengthy process (generally will take around 30 minutes to an hour to complete), /request_kyc will never confirm in its response that an entity was verified. Therefore, /check_kyc may be polled until a final confirmation is returned.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "description": "The usersignature header should be generated with the keypair associated with the user.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/header_msg.v1.json"
              },
              "examples": {
                "/check_kyc request": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "header_msg"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the header_msg JSON object.\n\nThe handle for which KYC confirmation is being checked should be in the header.user_handle field.\n\nBoth `authsignature` and `usersignature` headers are required for this request. (The `usersignature` header should be generated with the keypair associated with the user)"
        }
      }
    },
    "/link_account": {
      "post": {
        "summary": "Link Account",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ],
                      "description": "`SUCCESS` or `FAILURE`"
                    },
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the header_message"
                    },
                    "message": {
                      "type": "string",
                      "description": "Bank acount successfully linked OR Bank account not successfully linked"
                    },
                    "account_name": {
                      "type": "string",
                      "description": "Account name provided in the request."
                    },
                    "match_score": {
                      "type": "string",
                      "description": "0-1 weight of matching account holder name to KYCd user."
                    }
                  },
                  "required": [
                    "status",
                    "reference",
                    "message",
                    "account_name",
                    "match_score"
                  ]
                },
                "examples": {
                  "/link_account response": {
                    "value": {
                      "status": "SUCCESS",
                      "reference": "ref",
                      "message": "Bank account successfully linked.",
                      "account_name": "Custom Account Name",
                      "match_score": 0.825
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Bank account linked, but in a frozen state. Requires manual review - email support@silamoney.com for steps to unfreeze this bank account."
          },
          "400": {
            "description": "Invalid request body format."
          },
          "401": {
            "description": "`authsignature` or `usersignature` header was absent or incorrect."
          }
        },
        "operationId": "post-link_account",
        "description": "Uses a provided Plaid public token to link a bank account to a verified entity.\n\nThis endpoint accepts results from customer interaction with a Plaid Link integration.\n\nAt a minimum, your frontend Plaid integration will need to:\n* use a public key from Sila. For all environments (sandbox, development and production), please use the same public key:\nfa9dd19eb40982275785b09760ab79\n* be set to the \"sandbox\" environment for sandbox apps, and the \"production\" environment for production apps.\nuse the \"auth\" product from Plaid.\n\nNote: For 100% coverage of all supported institutions, we strongly recommend passing additional parameters when creating the Plaid Link interface to enable microdeposit verification. This configuration is provided in detail in the following sections of this documentation:\n\n* [Plaid Instant Match](https://docs.silamoney.com/?plaintext#instant-auth-and-instant-match)\n* [Plaid Automated Microdeposit Authentication](https://docs.silamoney.com/?plaintext#automated-microdeposit-authentication)\n* [Plaid Same Day Microdeposit Authentication](https://docs.silamoney.com/?plaintext#same-day-microdeposit-authentication)\n\n<h4>Plaid Link Integration Quickstart</h4>\nIn the sandbox, you will be connecting to Plaid's sandbox [Auth product](https://plaid.com/docs/#auth). In the sandbox, you can test with any bank that shows up in the Plaid plugin, and specify the username as `user_good`, and the password as `pass_good`. In production you will need to use real usernames and passwords for bank accounts of course.\n\nThe onSuccess() function of the Plaid plugin will return a public token and metadata object to your code. Please use our API to send us the public token, and we will query the routing number and account number of the bank account from Plaid and store it securely on our systems.\n\nFor an example of how this looks, you can look at Plaid's [documentation](https://plaid.com/docs/#integrating-with-link) and review our demo app.\n\nFor a more detailed dive, see the [Plaid Microdeposits](https://docs.silamoney.com/?plaintext#plaid-microdeposits) section of our documentation.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "name": "authsignature",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "description": "The usersignature header should be generated with the keypair associated with the user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/link_account_msg.v1.json"
              },
              "examples": {
                "/link_account example": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "link_account_msg",
                    "public_token": "public-xxx-xxx",
                    "account_name": "Custom Account Name",
                    "selected_account_id": "optional_selected_account_id"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the `link_account_msg` JSON object.\n\nThe `public_token` key is a required field and must have the public token returned in the onSuccess function of Plaid Link.\n\nThe `account_name` key is not required, but can be used to set a custom name to identify the linked checking account. If not provided, the linked account's name will be \"default\". We highly recommend specifying a custom name. Note: user handles cannot have two linked accounts with the same name.\n\nThe `selected_account_id` is not required; if provided, it should be an account ID in the array of selected accounts returned in the metadata object from Plaid Link. Currently, we do not link multiple accounts at once; you will need to send only one account ID. If no account ID is provided, we will link the first checking account we encounter from the array of accounts the customer has at their chosen bank.\n\nBoth authsignature and usersignature headers are required for this request."
        }
      }
    },
    "/get_accounts": {
      "post": {
        "summary": "/get_accounts",
        "tags": [],
        "responses": {
          "200": {
            "description": "Successfully fetched array of accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account_number": {
                      "type": "string"
                    },
                    "routing_number": {
                      "type": "integer"
                    },
                    "account_name": {
                      "type": "string"
                    },
                    "acount_type": {
                      "type": "string",
                      "enum": [
                        "CHECKING"
                      ]
                    },
                    "account_status": {
                      "type": "string",
                      "enum": [
                        "active",
                        "inactive"
                      ]
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "account_link_status": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "account_number",
                    "routing_number",
                    "account_name",
                    "acount_type",
                    "account_status",
                    "active",
                    "account_link_status"
                  ]
                },
                "examples": {
                  "/get_accounts response": {
                    "value": [
                      {
                        "account_number": "*1234",
                        "routing_number": "123456789",
                        "account_name": "default",
                        "account_type": "CHECKING",
                        "account_status": "active",
                        "active": "true/false",
                        "account_link_status": "microdeposit_automatically_verified"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body format."
          },
          "401": {
            "description": "`authsignature` or `usersignature` header was absent or incorrect."
          }
        },
        "operationId": "post-get_accounts",
        "description": "Gets basic bank account names linked to user handle.\n\nThis will return a list of account names, along with basic account information, linked to the requested user handle. These are the accounts that were linked using the /link_account endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "required": true,
            "description": "The usersignature header should be generated with the keypair associated with the user."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/get_accounts_msg.v1.json"
              },
              "examples": {
                "/get_accounts message": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "get_accounts_msg"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the get_accounts_msg JSON object.\n\nBoth authsignature and usersignature headers are required for this request."
        }
      }
    },
    "/issue_sila": {
      "post": {
        "summary": "/issue_sila",
        "tags": [],
        "responses": {
          "200": {
            "description": "Issuance process started OR Issuance process not started; see message attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the header_message"
                    },
                    "message": {
                      "type": "string",
                      "description": "`reference` submitted to ACH queue"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body format."
          },
          "401": {
            "description": "`authsignature` or `usersignature` header was absent or incorrect."
          }
        },
        "operationId": "post-issue_sila",
        "description": "Debits a specified account and issues tokens to the address belonging to the requested handle.\n\nThe /issue_sila endpoint starts the debit of a user's linked bank account; once that transaction has officially settled, a process that takes about two business days to complete, the handle's blockchain address will be issued SILA tokens.\n\nSILA tokens are pegged to the value of $0.01 USD. To request the debit of $795.43, for instance, you would request \"amount\": 79543.\n\nKeep in mind that, especially because ACH (automated clearing house) transactions take such a long time to clear, results must be returned asynchronously. You can check the results of a transaction using the /get_transactions endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "description": "The usersignature header should be generated with the keypair associated with the user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/issue_msg.v1.json"
              },
              "examples": {
                "/issue_sila example": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "issue_msg",
                    "amount": 1000,
                    "account_name": "default"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the `issue_msg` JSON object.\n\nThe `amount` field is the amount of SILA tokens to issue, which is equivalent to a dollar amount x 100, or a number of cents. For example, to debit $1 from a user's account, you would request an amount of 100.\n\nThe `account_name` field is the name of the handle's linked account from which to debit the equivalent dollar amount.\n\nBoth `authsignature` and `usersignature` headers are required for this request."
        }
      }
    },
    "/transfer_sila": {
      "post": {
        "summary": "/transfer_sila",
        "tags": [],
        "responses": {
          "200": {
            "description": "Transfer process started OR Transfer process not started, see `message` attribute",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer"
                    },
                    "message": {
                      "type": "string",
                      "description": "ref submitted to ETH queue"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/transfer_sila response example": {
                    "value": {
                      "reference": "ref",
                      "message": "ref submitted to ETH queue",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-transfer_sila",
        "description": "Starts a transfer of the requested amount of SILA to the requested destination handle.\n\nThis request triggers a transfer of SILA tokens over the blockchain, going from the current authenticated user to the specified destination handle.\n\nIn theory, SILA tokens can be transferred from any blockchain address to any blockchain address. This endpoint assumes that the recipient has been registered with Sila and has a handle. Token transfers are restricted to whitelisted addresses (addresses which belong to KYC-verified users). After full launch, tokens will be transferable to any address.\n\nSince the Ethereum platform is currently the only platform we support (though we plan to support others), this will create one blockchain transaction. When other platforms are added, transfers from one platform to another will result in burning of tokens from an address on one platform to minting of tokens to an address on a different platform (two different blockchain transactions).",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "description": "The usersignature header should be generated with the keypair associated with the user",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/transfer_msg.v1.json"
              },
              "examples": {
                "/transfer_sila example": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "transfer_msg",
                    "amount": 13,
                    "destination": "user2.silamoney.eth"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the transfer_msg JSON object.\n\nBoth `authsignature` and `usersignature` headers are required for this request."
        }
      }
    },
    "/redeem_sila": {
      "post": {
        "summary": "/redeem_sila",
        "tags": [],
        "responses": {
          "200": {
            "description": "Redemption process started OR Redemption process not started; see `message` attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer"
                    },
                    "message": {
                      "type": "string",
                      "description": "ref submitted to ETH queue"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-redeem_sila",
        "description": "Burns given amount of SILA at the handle's blockchain address and credits their named bank account in the equivalent monetary amount.\n\nThis is the reverse process of /issue_sila; tokens are removed from the handle's associated address, then the process of crediting the named bank account is started.\n\nIf the bank account cannot be credited (for instance, if the account has been closed), this operation will roll back and re-mint the tokens at the handle's address.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "usersignature",
            "required": true,
            "description": "The usersignature header should be generated with the keypair associated with the user"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/redeem_msg.v1.json"
              },
              "examples": {
                "/redeem_sila example": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "redeem_msg",
                    "amount": 1000,
                    "account_name": "default"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the redeem_msg JSON object.\n\nBoth authsignature and usersignature headers are required for this request."
        }
      }
    }
  },
  "components": {
    "securitySchemes": {}
  }
}