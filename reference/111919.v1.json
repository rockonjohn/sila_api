{
  "openapi": "3.0.0",
  "tags": [],
  "info": {
    "title": "Sila API",
    "version": "1.0",
    "description": "# Welcome to the Sila API!\n\nSila allows you to build financial applications quickly and easily. Our API endpoints enable:\n\n* **ID verification** compliant with **U.S. Know Your Customer (KYC)** regulations, \n* **Secure account linking** through our partner **Plaid**, \n* **ACH transfers** in the US, and \n* **Smart contract** programming on Ethereum with our ERC-20 stablecoin. \n\nWe will soon be adding support for **card payments**, **business ID verification**, and **international payments**.\n\nBy using us to build financial applications, you can:\n\n- Decrease your go-to-market time (no regulatory headache or flaky bank partnerships),\n- Dramatically decrease your upfront costs,\n- Keep sensitive data off of your servers,\n- Let us handle ACH transactions (send us JSON, not flat files), and\n- Have the option to transfer tokens pegged to the value of $0.01 USD directly on the blockchain.",
    "contact": {
      "name": "Sila",
      "url": "www.silamoney.com",
      "email": "info@silamoney.com"
    }
  },
  "servers": [
    {
      "url": "sandbox.silamoney.com/{version}",
      "description": "Sila Sandbox Environment"
    },
    {
      "url": "api.silamoney.com/{version}",
      "description": "Sila Production Environment"
    }
  ],
  "paths": {
    "/check_handle": {
      "post": {
        "summary": "Check Handle",
        "tags": [],
        "responses": {
          "200": {
            "description": "`Handle sent in header.user_handle is available.`\nOR\n`Handle sent in header.user_handle is taken.`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The status attribute is a JSON key sent in the response body.",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the header_message"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response of result:\n`user.silamoney.eth is available`"
                    },
                    "status": {
                      "type": "string",
                      "description": "Two possible attributes for a 200 response:\n`SUCCESS` = Handle sent in `header.user_handle is available`\n`FAILURE` = Handle sent in `header.user_handle is taken`",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/check_handle response": {
                    "value": {
                      "reference": "ref",
                      "message": "user.silamoney.eth is available.",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Handle sent in header.user_handle is a reserved handle according to our JSON schema. (Or: request body otherwise does not conform to JSON schema.)"
          },
          "401": {
            "description": "Auth signature is absent or derived address does not belong to auth_handle."
          }
        },
        "description": "*Checks if a specific handle is already taken.*\n\nA \"handle\" works like a username in the Sila ecosystem. This endpoint ensures that a potential handle is available for use. If an entity has already been created with that handle, this endpoint will respond with a message that says that the handle is already in use and a `\"status\": \"FAILURE\"` in the JSON response body.",
        "operationId": "CheckHandle",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "required": true,
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests. "
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/header_msg.v1.json"
              },
              "examples": {
                "/check_handle request": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "header_msg"
                  }
                }
              }
            }
          },
          "description": "In the `header.user_handle` field, put the handle for which you want to check availability. The entry for `header.auth_handle` should have your developer handle.\n\nThe request body format for this endpoint is the [header_msg](#header_msg) JSON object.\n\nAn `authsignature` header is required for this request. "
        }
      },
      "parameters": []
    },
    "/register": {
      "post": {
        "summary": "Register",
        "tags": [],
        "responses": {
          "200": {
            "description": "Handle successfully added to system with KYC data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the entity_msg"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response of result:\n`user.silamoney.eth was successfully registered`"
                    },
                    "status": {
                      "type": "string",
                      "description": "Handle successfully added to system with KYC data.",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/register response": {
                    "value": {
                      "reference": "SOME ID",
                      "message": "user.silamoney.eth was successfully registered ",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body format, handle already in use, or blockchain address already in use."
          },
          "401": {
            "description": "`authsignature` header was absent or incorrect."
          }
        },
        "description": "*Attaches KYC data and specified blockchain address to an assigned handle.*\n\nThis is the endpoint you will use to create a new user and attach information that will be used to verify their identity. This does not start verification of the KYC data; it only adds the data to be verified. See [/request_kyc](#request_kyc) and [/check_kyc](#check_kyc) for verifying KYC status.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests. ",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/entity_msg.v1.json"
              },
              "examples": {
                "/register request": {
                  "value": {
                    "header": {
                      "reference": "SOME ID",
                      "created": 1234567890,
                      "user_handle": "user.silamoney.eth",
                      "auth_handle": "handle.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH"
                    },
                    "message": "entity_msg",
                    "address": {
                      "address_alias": "home",
                      "street_address_1": "123 Main Street",
                      "city": "New City",
                      "state": "OR",
                      "country": "US",
                      "postal_code": "97204-1234"
                    },
                    "identity": {
                      "identity_alias": "SSN",
                      "identity_value": "123452222"
                    },
                    "contact": {
                      "phone": "503-123-4567",
                      "contact_alias": "",
                      "email": "example@silamoney.com"
                    },
                    "crypto_entry": {
                      "crypto_alias": "Address 1",
                      "crypto_address": "0x1234567890abcdef1234567890abcdef12345678",
                      "crypto_code": "ETH"
                    },
                    "entity": {
                      "birthdate": "1900-01-31",
                      "entity_name": "Example User",
                      "first_name": "Example",
                      "last_name": "User",
                      "relationship": "user"
                    }
                  }
                }
              }
            }
          },
          "description": "At this endpoint, you will need to complete all fields with user information and include a valid Ethereum address (must not be already used in Sila system and not a smart contract). The private key associated with the `crypto_entry.crypto_address` should be used to generate usersignature headers on some subsequent calls.\n\nIn this version of the API, required KYC data includes:\n\n- Full legal name\n- U.S. Social Security Number (SSN)\n- Date of birth\n- A valid street address\n- An email address\n- A phone number\n\nExpect these requirements to change in upcoming versions!\n\nThis endpoint's request body is the [entity_msg](#entity_msg) JSON object.\n\nAn `authsignature` header is required for this request."
        },
        "operationId": "Register"
      }
    },
    "/request_kyc": {
      "post": {
        "summary": "Request KYC",
        "tags": [],
        "responses": {
          "200": {
            "description": "The verification process for the user registered under header.user_handle has been successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the entity_msg"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response of result:\n`user.silamoney.eth submitted for KYC review`"
                    },
                    "status": {
                      "type": "string",
                      "description": "`SUCCESS` or `FAILURE`",
                      "enum": [
                        "SUCCESS"
                      ]
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body format."
          },
          "401": {
            "description": "authsignature` or `usersignature` header was absent or incorrect."
          }
        },
        "operationId": "post-request_kyc",
        "description": "After having created a user at a handle with /register, you can start the KYC verification process on the user with this endpoint. The verification results for a handle are asynchronously returned at the /check_kyc endpoint.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "required": true,
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/header_msg.v1.json"
              },
              "examples": {
                "/request_kyc request": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "header_msg"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the header_msg JSON object.\n\nheader.user_handle should have the registered handle to be verified.\n\nAn `authsignature` header is required for this request. "
        }
      }
    },
    "/check_kyc": {
      "post": {
        "summary": "Check KYC",
        "tags": [],
        "responses": {
          "200": {
            "description": "The user handle has successfully passed KYC verification _OR_  \nThe user handle has not successfully passed KYC verification (may be pending, not have been registered, or have failed; `message` attribute will contain \"pending\" or \"failed\" substring).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The status attribute is a JSON key sent in the response body.",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "`reference` in the response returns the `reference` provided by the customer in the header_message"
                    },
                    "message": {
                      "type": "string",
                      "description": "Plaintext response with result: `KYC passed for user.silamoney.eth`"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ],
                      "description": "The user handle has not successfully passed KYC verification (may be pending, not have been registered, or have failed; `message` attribute will contain \"pending\" or \"failed\" substring)."
                    }
                  },
                  "required": [
                    "reference",
                    "message",
                    "status"
                  ]
                },
                "examples": {
                  "/check_kyc response": {
                    "value": {
                      "reference": "ref",
                      "message": "KYC passed for user.silamoney.eth",
                      "status": "SUCCESS"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-check_kyc",
        "description": "Returns whether entity attached to user handle is verified, not valid, or still pending.\n\nThis endpoint should be run after successfully completing /register and /request_kyc calls.\n\nSince ID verification is a relatively lengthy process (generally will take around 30 minutes to an hour to complete), /request_kyc will never confirm in its response that an entity was verified. Therefore, /check_kyc may be polled until a final confirmation is returned.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "authsignature",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/header_msg.v1.json"
              },
              "examples": {
                "/check_kyc request": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "header_msg"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the header_msg JSON object.\n\nThe handle for which KYC confirmation is being checked should be in the header.user_handle field.\n\nBoth `authsignature` and `usersignature` headers are required for this request. (The `usersignature` header should be generated with the keypair associated with the user)"
        }
      }
    },
    "/link_account": {
      "post": {
        "summary": "Link Account",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILURE"
                      ]
                    },
                    "reference": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "account_name": {
                      "type": "string"
                    },
                    "match_score": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "reference",
                    "message",
                    "account_name",
                    "match_score"
                  ]
                },
                "examples": {
                  "/link_account response": {
                    "value": {
                      "status": "SUCCESS",
                      "reference": "ref",
                      "message": "Bank account successfully linked.",
                      "account_name": "Custom Account Name",
                      "match_score": 0.825
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "post-link_account",
        "description": "Uses a provided Plaid public token to link a bank account to a verified entity.\n\nThis endpoint accepts results from customer interaction with a Plaid Link integration.\n\nAt a minimum, your frontend Plaid integration will need to:\n* use a public key from Sila. For all environments (sandbox, development and production), please use the same public key:\nfa9dd19eb40982275785b09760ab79\n* be set to the \"sandbox\" environment for sandbox apps, and the \"production\" environment for production apps.\nuse the \"auth\" product from Plaid.\n\nNote: For 100% coverage of all supported institutions, we strongly recommend passing additional parameters when creating the Plaid Link interface to enable microdeposit verification. This configuration is provided in detail in the following sections of this documentation:\n\n* [Plaid Instant Match](https://docs.silamoney.com/?plaintext#instant-auth-and-instant-match)\n* [Plaid Automated Microdeposit Authentication](https://docs.silamoney.com/?plaintext#automated-microdeposit-authentication)\n* [Plaid Same Day Microdeposit Authentication](https://docs.silamoney.com/?plaintext#same-day-microdeposit-authentication)\n\n<h4>Plaid Link Integration Quickstart</h4>\nIn the sandbox, you will be connecting to Plaid's sandbox [Auth product](https://plaid.com/docs/#auth). In the sandbox, you can test with any bank that shows up in the Plaid plugin, and specify the username as `user_good`, and the password as `pass_good`. In production you will need to use real usernames and passwords for bank accounts of course.\n\nThe onSuccess() function of the Plaid plugin will return a public token and metadata object to your code. Please use our API to send us the public token, and we will query the routing number and account number of the bank account from Plaid and store it securely on our systems.\n\nFor an example of how this looks, you can look at Plaid's [documentation](https://plaid.com/docs/#integrating-with-link) and review our demo app.\n\nFor a more detailed dive, see the [Plaid Microdeposits](https://docs.silamoney.com/?plaintext#plaid-microdeposits) section of our documentation.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "description": "Where many other API systems may require client IDs and secrets, Sila uses the [Elliptic Curve Digital Signature Algorithm (ECDSA)](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm) to secure and validate requests.",
            "name": "authsignature",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/link_account_msg.v1.json"
              },
              "examples": {
                "/link_account example": {
                  "value": {
                    "header": {
                      "created": 1234567890,
                      "auth_handle": "handle.silamoney.eth",
                      "user_handle": "user.silamoney.eth",
                      "version": "0.2",
                      "crypto": "ETH",
                      "reference": "ref"
                    },
                    "message": "link_account_msg",
                    "public_token": "public-xxx-xxx",
                    "account_name": "Custom Account Name",
                    "selected_account_id": "optional_selected_account_id"
                  }
                }
              }
            }
          },
          "description": "The request body at this endpoint is the `link_account_msg` JSON object.\n\nThe `public_token` key is a required field and must have the public token returned in the onSuccess function of Plaid Link.\n\nThe `account_name` key is not required, but can be used to set a custom name to identify the linked checking account. If not provided, the linked account's name will be \"default\". We highly recommend specifying a custom name. Note: user handles cannot have two linked accounts with the same name.\n\nThe `selected_account_id` is not required; if provided, it should be an account ID in the array of selected accounts returned in the metadata object from Plaid Link. Currently, we do not link multiple accounts at once; you will need to send only one account ID. If no account ID is provided, we will link the first checking account we encounter from the array of accounts the customer has at their chosen bank.\n\nBoth authsignature and usersignature headers are required for this request."
        }
      }
    }
  },
  "components": {
    "securitySchemes": {}
  }
}